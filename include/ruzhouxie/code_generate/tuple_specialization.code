template<>
struct tuple<>
{

    template<size_t I> requires (I < 0uz)
    RUZHOUXIE_INLINE constexpr auto&& get()& noexcept
    {
        
    }

    template<size_t I> requires (I < 0uz)
    RUZHOUXIE_INLINE constexpr auto&& get()const& noexcept
    {
        
    }

    template<size_t I> requires (I < 0uz)
    RUZHOUXIE_INLINE constexpr auto&& get()&& noexcept
    {
        
    }

    template<size_t I> requires (I < 0uz)
    RUZHOUXIE_INLINE constexpr auto&& get()const&& noexcept
    {
        
    }

    friend constexpr bool operator==(const tuple&, const tuple&) = default;
};

template<typename T0>
struct tuple<T0>
{
    RUZHOUXIE_MAYBE_EMPTY T0 element0;

    template<size_t I> requires (I < 1uz)
    RUZHOUXIE_INLINE constexpr auto&& get()& noexcept
    {
        if constexpr(I == 0uz) return element0;
    }

    template<size_t I> requires (I < 1uz)
    RUZHOUXIE_INLINE constexpr auto&& get()const& noexcept
    {
        if constexpr(I == 0uz) return element0;
    }

    template<size_t I> requires (I < 1uz)
    RUZHOUXIE_INLINE constexpr auto&& get()&& noexcept
    {
        if constexpr(I == 0uz) return ::ruzhouxie::fwd<tuple&&, T0>(element0);
    }

    template<size_t I> requires (I < 1uz)
    RUZHOUXIE_INLINE constexpr auto&& get()const&& noexcept
    {
        if constexpr(I == 0uz) return ::ruzhouxie::fwd<const tuple&&, T0>(element0);
    }

    friend constexpr bool operator==(const tuple&, const tuple&) = default;
};

template<typename T0, typename T1>
struct tuple<T0, T1>
{
    RUZHOUXIE_MAYBE_EMPTY T0 element0;
    RUZHOUXIE_MAYBE_EMPTY T1 element1;

    template<size_t I> requires (I < 2uz)
    RUZHOUXIE_INLINE constexpr auto&& get()& noexcept
    {
        if constexpr(I == 0uz) return element0;
        else if constexpr(I == 1uz) return element1;
    }

    template<size_t I> requires (I < 2uz)
    RUZHOUXIE_INLINE constexpr auto&& get()const& noexcept
    {
        if constexpr(I == 0uz) return element0;
        else if constexpr(I == 1uz) return element1;
    }

    template<size_t I> requires (I < 2uz)
    RUZHOUXIE_INLINE constexpr auto&& get()&& noexcept
    {
        if constexpr(I == 0uz) return ::ruzhouxie::fwd<tuple&&, T0>(element0);
        else if constexpr(I == 1uz) return ::ruzhouxie::fwd<tuple&&, T1>(element1);
    }

    template<size_t I> requires (I < 2uz)
    RUZHOUXIE_INLINE constexpr auto&& get()const&& noexcept
    {
        if constexpr(I == 0uz) return ::ruzhouxie::fwd<const tuple&&, T0>(element0);
        else if constexpr(I == 1uz) return ::ruzhouxie::fwd<const tuple&&, T1>(element1);
    }

    friend constexpr bool operator==(const tuple&, const tuple&) = default;
};

template<typename T0, typename T1, typename T2>
struct tuple<T0, T1, T2>
{
    RUZHOUXIE_MAYBE_EMPTY T0 element0;
    RUZHOUXIE_MAYBE_EMPTY T1 element1;
    RUZHOUXIE_MAYBE_EMPTY T2 element2;

    template<size_t I> requires (I < 3uz)
    RUZHOUXIE_INLINE constexpr auto&& get()& noexcept
    {
        if constexpr(I == 0uz) return element0;
        else if constexpr(I == 1uz) return element1;
        else if constexpr(I == 2uz) return element2;
    }

    template<size_t I> requires (I < 3uz)
    RUZHOUXIE_INLINE constexpr auto&& get()const& noexcept
    {
        if constexpr(I == 0uz) return element0;
        else if constexpr(I == 1uz) return element1;
        else if constexpr(I == 2uz) return element2;
    }

    template<size_t I> requires (I < 3uz)
    RUZHOUXIE_INLINE constexpr auto&& get()&& noexcept
    {
        if constexpr(I == 0uz) return ::ruzhouxie::fwd<tuple&&, T0>(element0);
        else if constexpr(I == 1uz) return ::ruzhouxie::fwd<tuple&&, T1>(element1);
        else if constexpr(I == 2uz) return ::ruzhouxie::fwd<tuple&&, T2>(element2);
    }

    template<size_t I> requires (I < 3uz)
    RUZHOUXIE_INLINE constexpr auto&& get()const&& noexcept
    {
        if constexpr(I == 0uz) return ::ruzhouxie::fwd<const tuple&&, T0>(element0);
        else if constexpr(I == 1uz) return ::ruzhouxie::fwd<const tuple&&, T1>(element1);
        else if constexpr(I == 2uz) return ::ruzhouxie::fwd<const tuple&&, T2>(element2);
    }

    friend constexpr bool operator==(const tuple&, const tuple&) = default;
};

template<typename T0, typename T1, typename T2, typename T3>
struct tuple<T0, T1, T2, T3>
{
    RUZHOUXIE_MAYBE_EMPTY T0 element0;
    RUZHOUXIE_MAYBE_EMPTY T1 element1;
    RUZHOUXIE_MAYBE_EMPTY T2 element2;
    RUZHOUXIE_MAYBE_EMPTY T3 element3;

    template<size_t I> requires (I < 4uz)
    RUZHOUXIE_INLINE constexpr auto&& get()& noexcept
    {
        if constexpr(I == 0uz) return element0;
        else if constexpr(I == 1uz) return element1;
        else if constexpr(I == 2uz) return element2;
        else if constexpr(I == 3uz) return element3;
    }

    template<size_t I> requires (I < 4uz)
    RUZHOUXIE_INLINE constexpr auto&& get()const& noexcept
    {
        if constexpr(I == 0uz) return element0;
        else if constexpr(I == 1uz) return element1;
        else if constexpr(I == 2uz) return element2;
        else if constexpr(I == 3uz) return element3;
    }

    template<size_t I> requires (I < 4uz)
    RUZHOUXIE_INLINE constexpr auto&& get()&& noexcept
    {
        if constexpr(I == 0uz) return ::ruzhouxie::fwd<tuple&&, T0>(element0);
        else if constexpr(I == 1uz) return ::ruzhouxie::fwd<tuple&&, T1>(element1);
        else if constexpr(I == 2uz) return ::ruzhouxie::fwd<tuple&&, T2>(element2);
        else if constexpr(I == 3uz) return ::ruzhouxie::fwd<tuple&&, T3>(element3);
    }

    template<size_t I> requires (I < 4uz)
    RUZHOUXIE_INLINE constexpr auto&& get()const&& noexcept
    {
        if constexpr(I == 0uz) return ::ruzhouxie::fwd<const tuple&&, T0>(element0);
        else if constexpr(I == 1uz) return ::ruzhouxie::fwd<const tuple&&, T1>(element1);
        else if constexpr(I == 2uz) return ::ruzhouxie::fwd<const tuple&&, T2>(element2);
        else if constexpr(I == 3uz) return ::ruzhouxie::fwd<const tuple&&, T3>(element3);
    }

    friend constexpr bool operator==(const tuple&, const tuple&) = default;
};

template<typename T0, typename T1, typename T2, typename T3, typename T4>
struct tuple<T0, T1, T2, T3, T4>
{
    RUZHOUXIE_MAYBE_EMPTY T0 element0;
    RUZHOUXIE_MAYBE_EMPTY T1 element1;
    RUZHOUXIE_MAYBE_EMPTY T2 element2;
    RUZHOUXIE_MAYBE_EMPTY T3 element3;
    RUZHOUXIE_MAYBE_EMPTY T4 element4;

    template<size_t I> requires (I < 5uz)
    RUZHOUXIE_INLINE constexpr auto&& get()& noexcept
    {
        if constexpr(I == 0uz) return element0;
        else if constexpr(I == 1uz) return element1;
        else if constexpr(I == 2uz) return element2;
        else if constexpr(I == 3uz) return element3;
        else if constexpr(I == 4uz) return element4;
    }

    template<size_t I> requires (I < 5uz)
    RUZHOUXIE_INLINE constexpr auto&& get()const& noexcept
    {
        if constexpr(I == 0uz) return element0;
        else if constexpr(I == 1uz) return element1;
        else if constexpr(I == 2uz) return element2;
        else if constexpr(I == 3uz) return element3;
        else if constexpr(I == 4uz) return element4;
    }

    template<size_t I> requires (I < 5uz)
    RUZHOUXIE_INLINE constexpr auto&& get()&& noexcept
    {
        if constexpr(I == 0uz) return ::ruzhouxie::fwd<tuple&&, T0>(element0);
        else if constexpr(I == 1uz) return ::ruzhouxie::fwd<tuple&&, T1>(element1);
        else if constexpr(I == 2uz) return ::ruzhouxie::fwd<tuple&&, T2>(element2);
        else if constexpr(I == 3uz) return ::ruzhouxie::fwd<tuple&&, T3>(element3);
        else if constexpr(I == 4uz) return ::ruzhouxie::fwd<tuple&&, T4>(element4);
    }

    template<size_t I> requires (I < 5uz)
    RUZHOUXIE_INLINE constexpr auto&& get()const&& noexcept
    {
        if constexpr(I == 0uz) return ::ruzhouxie::fwd<const tuple&&, T0>(element0);
        else if constexpr(I == 1uz) return ::ruzhouxie::fwd<const tuple&&, T1>(element1);
        else if constexpr(I == 2uz) return ::ruzhouxie::fwd<const tuple&&, T2>(element2);
        else if constexpr(I == 3uz) return ::ruzhouxie::fwd<const tuple&&, T3>(element3);
        else if constexpr(I == 4uz) return ::ruzhouxie::fwd<const tuple&&, T4>(element4);
    }

    friend constexpr bool operator==(const tuple&, const tuple&) = default;
};

template<typename T0, typename T1, typename T2, typename T3, typename T4, typename T5>
struct tuple<T0, T1, T2, T3, T4, T5>
{
    RUZHOUXIE_MAYBE_EMPTY T0 element0;
    RUZHOUXIE_MAYBE_EMPTY T1 element1;
    RUZHOUXIE_MAYBE_EMPTY T2 element2;
    RUZHOUXIE_MAYBE_EMPTY T3 element3;
    RUZHOUXIE_MAYBE_EMPTY T4 element4;
    RUZHOUXIE_MAYBE_EMPTY T5 element5;

    template<size_t I> requires (I < 6uz)
    RUZHOUXIE_INLINE constexpr auto&& get()& noexcept
    {
        if constexpr(I == 0uz) return element0;
        else if constexpr(I == 1uz) return element1;
        else if constexpr(I == 2uz) return element2;
        else if constexpr(I == 3uz) return element3;
        else if constexpr(I == 4uz) return element4;
        else if constexpr(I == 5uz) return element5;
    }

    template<size_t I> requires (I < 6uz)
    RUZHOUXIE_INLINE constexpr auto&& get()const& noexcept
    {
        if constexpr(I == 0uz) return element0;
        else if constexpr(I == 1uz) return element1;
        else if constexpr(I == 2uz) return element2;
        else if constexpr(I == 3uz) return element3;
        else if constexpr(I == 4uz) return element4;
        else if constexpr(I == 5uz) return element5;
    }

    template<size_t I> requires (I < 6uz)
    RUZHOUXIE_INLINE constexpr auto&& get()&& noexcept
    {
        if constexpr(I == 0uz) return ::ruzhouxie::fwd<tuple&&, T0>(element0);
        else if constexpr(I == 1uz) return ::ruzhouxie::fwd<tuple&&, T1>(element1);
        else if constexpr(I == 2uz) return ::ruzhouxie::fwd<tuple&&, T2>(element2);
        else if constexpr(I == 3uz) return ::ruzhouxie::fwd<tuple&&, T3>(element3);
        else if constexpr(I == 4uz) return ::ruzhouxie::fwd<tuple&&, T4>(element4);
        else if constexpr(I == 5uz) return ::ruzhouxie::fwd<tuple&&, T5>(element5);
    }

    template<size_t I> requires (I < 6uz)
    RUZHOUXIE_INLINE constexpr auto&& get()const&& noexcept
    {
        if constexpr(I == 0uz) return ::ruzhouxie::fwd<const tuple&&, T0>(element0);
        else if constexpr(I == 1uz) return ::ruzhouxie::fwd<const tuple&&, T1>(element1);
        else if constexpr(I == 2uz) return ::ruzhouxie::fwd<const tuple&&, T2>(element2);
        else if constexpr(I == 3uz) return ::ruzhouxie::fwd<const tuple&&, T3>(element3);
        else if constexpr(I == 4uz) return ::ruzhouxie::fwd<const tuple&&, T4>(element4);
        else if constexpr(I == 5uz) return ::ruzhouxie::fwd<const tuple&&, T5>(element5);
    }

    friend constexpr bool operator==(const tuple&, const tuple&) = default;
};

template<typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6>
struct tuple<T0, T1, T2, T3, T4, T5, T6>
{
    RUZHOUXIE_MAYBE_EMPTY T0 element0;
    RUZHOUXIE_MAYBE_EMPTY T1 element1;
    RUZHOUXIE_MAYBE_EMPTY T2 element2;
    RUZHOUXIE_MAYBE_EMPTY T3 element3;
    RUZHOUXIE_MAYBE_EMPTY T4 element4;
    RUZHOUXIE_MAYBE_EMPTY T5 element5;
    RUZHOUXIE_MAYBE_EMPTY T6 element6;

    template<size_t I> requires (I < 7uz)
    RUZHOUXIE_INLINE constexpr auto&& get()& noexcept
    {
        if constexpr(I == 0uz) return element0;
        else if constexpr(I == 1uz) return element1;
        else if constexpr(I == 2uz) return element2;
        else if constexpr(I == 3uz) return element3;
        else if constexpr(I == 4uz) return element4;
        else if constexpr(I == 5uz) return element5;
        else if constexpr(I == 6uz) return element6;
    }

    template<size_t I> requires (I < 7uz)
    RUZHOUXIE_INLINE constexpr auto&& get()const& noexcept
    {
        if constexpr(I == 0uz) return element0;
        else if constexpr(I == 1uz) return element1;
        else if constexpr(I == 2uz) return element2;
        else if constexpr(I == 3uz) return element3;
        else if constexpr(I == 4uz) return element4;
        else if constexpr(I == 5uz) return element5;
        else if constexpr(I == 6uz) return element6;
    }

    template<size_t I> requires (I < 7uz)
    RUZHOUXIE_INLINE constexpr auto&& get()&& noexcept
    {
        if constexpr(I == 0uz) return ::ruzhouxie::fwd<tuple&&, T0>(element0);
        else if constexpr(I == 1uz) return ::ruzhouxie::fwd<tuple&&, T1>(element1);
        else if constexpr(I == 2uz) return ::ruzhouxie::fwd<tuple&&, T2>(element2);
        else if constexpr(I == 3uz) return ::ruzhouxie::fwd<tuple&&, T3>(element3);
        else if constexpr(I == 4uz) return ::ruzhouxie::fwd<tuple&&, T4>(element4);
        else if constexpr(I == 5uz) return ::ruzhouxie::fwd<tuple&&, T5>(element5);
        else if constexpr(I == 6uz) return ::ruzhouxie::fwd<tuple&&, T6>(element6);
    }

    template<size_t I> requires (I < 7uz)
    RUZHOUXIE_INLINE constexpr auto&& get()const&& noexcept
    {
        if constexpr(I == 0uz) return ::ruzhouxie::fwd<const tuple&&, T0>(element0);
        else if constexpr(I == 1uz) return ::ruzhouxie::fwd<const tuple&&, T1>(element1);
        else if constexpr(I == 2uz) return ::ruzhouxie::fwd<const tuple&&, T2>(element2);
        else if constexpr(I == 3uz) return ::ruzhouxie::fwd<const tuple&&, T3>(element3);
        else if constexpr(I == 4uz) return ::ruzhouxie::fwd<const tuple&&, T4>(element4);
        else if constexpr(I == 5uz) return ::ruzhouxie::fwd<const tuple&&, T5>(element5);
        else if constexpr(I == 6uz) return ::ruzhouxie::fwd<const tuple&&, T6>(element6);
    }

    friend constexpr bool operator==(const tuple&, const tuple&) = default;
};

template<typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7>
struct tuple<T0, T1, T2, T3, T4, T5, T6, T7>
{
    RUZHOUXIE_MAYBE_EMPTY T0 element0;
    RUZHOUXIE_MAYBE_EMPTY T1 element1;
    RUZHOUXIE_MAYBE_EMPTY T2 element2;
    RUZHOUXIE_MAYBE_EMPTY T3 element3;
    RUZHOUXIE_MAYBE_EMPTY T4 element4;
    RUZHOUXIE_MAYBE_EMPTY T5 element5;
    RUZHOUXIE_MAYBE_EMPTY T6 element6;
    RUZHOUXIE_MAYBE_EMPTY T7 element7;

    template<size_t I> requires (I < 8uz)
    RUZHOUXIE_INLINE constexpr auto&& get()& noexcept
    {
        if constexpr(I == 0uz) return element0;
        else if constexpr(I == 1uz) return element1;
        else if constexpr(I == 2uz) return element2;
        else if constexpr(I == 3uz) return element3;
        else if constexpr(I == 4uz) return element4;
        else if constexpr(I == 5uz) return element5;
        else if constexpr(I == 6uz) return element6;
        else if constexpr(I == 7uz) return element7;
    }

    template<size_t I> requires (I < 8uz)
    RUZHOUXIE_INLINE constexpr auto&& get()const& noexcept
    {
        if constexpr(I == 0uz) return element0;
        else if constexpr(I == 1uz) return element1;
        else if constexpr(I == 2uz) return element2;
        else if constexpr(I == 3uz) return element3;
        else if constexpr(I == 4uz) return element4;
        else if constexpr(I == 5uz) return element5;
        else if constexpr(I == 6uz) return element6;
        else if constexpr(I == 7uz) return element7;
    }

    template<size_t I> requires (I < 8uz)
    RUZHOUXIE_INLINE constexpr auto&& get()&& noexcept
    {
        if constexpr(I == 0uz) return ::ruzhouxie::fwd<tuple&&, T0>(element0);
        else if constexpr(I == 1uz) return ::ruzhouxie::fwd<tuple&&, T1>(element1);
        else if constexpr(I == 2uz) return ::ruzhouxie::fwd<tuple&&, T2>(element2);
        else if constexpr(I == 3uz) return ::ruzhouxie::fwd<tuple&&, T3>(element3);
        else if constexpr(I == 4uz) return ::ruzhouxie::fwd<tuple&&, T4>(element4);
        else if constexpr(I == 5uz) return ::ruzhouxie::fwd<tuple&&, T5>(element5);
        else if constexpr(I == 6uz) return ::ruzhouxie::fwd<tuple&&, T6>(element6);
        else if constexpr(I == 7uz) return ::ruzhouxie::fwd<tuple&&, T7>(element7);
    }

    template<size_t I> requires (I < 8uz)
    RUZHOUXIE_INLINE constexpr auto&& get()const&& noexcept
    {
        if constexpr(I == 0uz) return ::ruzhouxie::fwd<const tuple&&, T0>(element0);
        else if constexpr(I == 1uz) return ::ruzhouxie::fwd<const tuple&&, T1>(element1);
        else if constexpr(I == 2uz) return ::ruzhouxie::fwd<const tuple&&, T2>(element2);
        else if constexpr(I == 3uz) return ::ruzhouxie::fwd<const tuple&&, T3>(element3);
        else if constexpr(I == 4uz) return ::ruzhouxie::fwd<const tuple&&, T4>(element4);
        else if constexpr(I == 5uz) return ::ruzhouxie::fwd<const tuple&&, T5>(element5);
        else if constexpr(I == 6uz) return ::ruzhouxie::fwd<const tuple&&, T6>(element6);
        else if constexpr(I == 7uz) return ::ruzhouxie::fwd<const tuple&&, T7>(element7);
    }

    friend constexpr bool operator==(const tuple&, const tuple&) = default;
};

template<typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8>
struct tuple<T0, T1, T2, T3, T4, T5, T6, T7, T8>
{
    RUZHOUXIE_MAYBE_EMPTY T0 element0;
    RUZHOUXIE_MAYBE_EMPTY T1 element1;
    RUZHOUXIE_MAYBE_EMPTY T2 element2;
    RUZHOUXIE_MAYBE_EMPTY T3 element3;
    RUZHOUXIE_MAYBE_EMPTY T4 element4;
    RUZHOUXIE_MAYBE_EMPTY T5 element5;
    RUZHOUXIE_MAYBE_EMPTY T6 element6;
    RUZHOUXIE_MAYBE_EMPTY T7 element7;
    RUZHOUXIE_MAYBE_EMPTY T8 element8;

    template<size_t I> requires (I < 9uz)
    RUZHOUXIE_INLINE constexpr auto&& get()& noexcept
    {
        if constexpr(I == 0uz) return element0;
        else if constexpr(I == 1uz) return element1;
        else if constexpr(I == 2uz) return element2;
        else if constexpr(I == 3uz) return element3;
        else if constexpr(I == 4uz) return element4;
        else if constexpr(I == 5uz) return element5;
        else if constexpr(I == 6uz) return element6;
        else if constexpr(I == 7uz) return element7;
        else if constexpr(I == 8uz) return element8;
    }

    template<size_t I> requires (I < 9uz)
    RUZHOUXIE_INLINE constexpr auto&& get()const& noexcept
    {
        if constexpr(I == 0uz) return element0;
        else if constexpr(I == 1uz) return element1;
        else if constexpr(I == 2uz) return element2;
        else if constexpr(I == 3uz) return element3;
        else if constexpr(I == 4uz) return element4;
        else if constexpr(I == 5uz) return element5;
        else if constexpr(I == 6uz) return element6;
        else if constexpr(I == 7uz) return element7;
        else if constexpr(I == 8uz) return element8;
    }

    template<size_t I> requires (I < 9uz)
    RUZHOUXIE_INLINE constexpr auto&& get()&& noexcept
    {
        if constexpr(I == 0uz) return ::ruzhouxie::fwd<tuple&&, T0>(element0);
        else if constexpr(I == 1uz) return ::ruzhouxie::fwd<tuple&&, T1>(element1);
        else if constexpr(I == 2uz) return ::ruzhouxie::fwd<tuple&&, T2>(element2);
        else if constexpr(I == 3uz) return ::ruzhouxie::fwd<tuple&&, T3>(element3);
        else if constexpr(I == 4uz) return ::ruzhouxie::fwd<tuple&&, T4>(element4);
        else if constexpr(I == 5uz) return ::ruzhouxie::fwd<tuple&&, T5>(element5);
        else if constexpr(I == 6uz) return ::ruzhouxie::fwd<tuple&&, T6>(element6);
        else if constexpr(I == 7uz) return ::ruzhouxie::fwd<tuple&&, T7>(element7);
        else if constexpr(I == 8uz) return ::ruzhouxie::fwd<tuple&&, T8>(element8);
    }

    template<size_t I> requires (I < 9uz)
    RUZHOUXIE_INLINE constexpr auto&& get()const&& noexcept
    {
        if constexpr(I == 0uz) return ::ruzhouxie::fwd<const tuple&&, T0>(element0);
        else if constexpr(I == 1uz) return ::ruzhouxie::fwd<const tuple&&, T1>(element1);
        else if constexpr(I == 2uz) return ::ruzhouxie::fwd<const tuple&&, T2>(element2);
        else if constexpr(I == 3uz) return ::ruzhouxie::fwd<const tuple&&, T3>(element3);
        else if constexpr(I == 4uz) return ::ruzhouxie::fwd<const tuple&&, T4>(element4);
        else if constexpr(I == 5uz) return ::ruzhouxie::fwd<const tuple&&, T5>(element5);
        else if constexpr(I == 6uz) return ::ruzhouxie::fwd<const tuple&&, T6>(element6);
        else if constexpr(I == 7uz) return ::ruzhouxie::fwd<const tuple&&, T7>(element7);
        else if constexpr(I == 8uz) return ::ruzhouxie::fwd<const tuple&&, T8>(element8);
    }

    friend constexpr bool operator==(const tuple&, const tuple&) = default;
};

template<typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9>
struct tuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>
{
    RUZHOUXIE_MAYBE_EMPTY T0 element0;
    RUZHOUXIE_MAYBE_EMPTY T1 element1;
    RUZHOUXIE_MAYBE_EMPTY T2 element2;
    RUZHOUXIE_MAYBE_EMPTY T3 element3;
    RUZHOUXIE_MAYBE_EMPTY T4 element4;
    RUZHOUXIE_MAYBE_EMPTY T5 element5;
    RUZHOUXIE_MAYBE_EMPTY T6 element6;
    RUZHOUXIE_MAYBE_EMPTY T7 element7;
    RUZHOUXIE_MAYBE_EMPTY T8 element8;
    RUZHOUXIE_MAYBE_EMPTY T9 element9;

    template<size_t I> requires (I < 10uz)
    RUZHOUXIE_INLINE constexpr auto&& get()& noexcept
    {
        if constexpr(I == 0uz) return element0;
        else if constexpr(I == 1uz) return element1;
        else if constexpr(I == 2uz) return element2;
        else if constexpr(I == 3uz) return element3;
        else if constexpr(I == 4uz) return element4;
        else if constexpr(I == 5uz) return element5;
        else if constexpr(I == 6uz) return element6;
        else if constexpr(I == 7uz) return element7;
        else if constexpr(I == 8uz) return element8;
        else if constexpr(I == 9uz) return element9;
    }

    template<size_t I> requires (I < 10uz)
    RUZHOUXIE_INLINE constexpr auto&& get()const& noexcept
    {
        if constexpr(I == 0uz) return element0;
        else if constexpr(I == 1uz) return element1;
        else if constexpr(I == 2uz) return element2;
        else if constexpr(I == 3uz) return element3;
        else if constexpr(I == 4uz) return element4;
        else if constexpr(I == 5uz) return element5;
        else if constexpr(I == 6uz) return element6;
        else if constexpr(I == 7uz) return element7;
        else if constexpr(I == 8uz) return element8;
        else if constexpr(I == 9uz) return element9;
    }

    template<size_t I> requires (I < 10uz)
    RUZHOUXIE_INLINE constexpr auto&& get()&& noexcept
    {
        if constexpr(I == 0uz) return ::ruzhouxie::fwd<tuple&&, T0>(element0);
        else if constexpr(I == 1uz) return ::ruzhouxie::fwd<tuple&&, T1>(element1);
        else if constexpr(I == 2uz) return ::ruzhouxie::fwd<tuple&&, T2>(element2);
        else if constexpr(I == 3uz) return ::ruzhouxie::fwd<tuple&&, T3>(element3);
        else if constexpr(I == 4uz) return ::ruzhouxie::fwd<tuple&&, T4>(element4);
        else if constexpr(I == 5uz) return ::ruzhouxie::fwd<tuple&&, T5>(element5);
        else if constexpr(I == 6uz) return ::ruzhouxie::fwd<tuple&&, T6>(element6);
        else if constexpr(I == 7uz) return ::ruzhouxie::fwd<tuple&&, T7>(element7);
        else if constexpr(I == 8uz) return ::ruzhouxie::fwd<tuple&&, T8>(element8);
        else if constexpr(I == 9uz) return ::ruzhouxie::fwd<tuple&&, T9>(element9);
    }

    template<size_t I> requires (I < 10uz)
    RUZHOUXIE_INLINE constexpr auto&& get()const&& noexcept
    {
        if constexpr(I == 0uz) return ::ruzhouxie::fwd<const tuple&&, T0>(element0);
        else if constexpr(I == 1uz) return ::ruzhouxie::fwd<const tuple&&, T1>(element1);
        else if constexpr(I == 2uz) return ::ruzhouxie::fwd<const tuple&&, T2>(element2);
        else if constexpr(I == 3uz) return ::ruzhouxie::fwd<const tuple&&, T3>(element3);
        else if constexpr(I == 4uz) return ::ruzhouxie::fwd<const tuple&&, T4>(element4);
        else if constexpr(I == 5uz) return ::ruzhouxie::fwd<const tuple&&, T5>(element5);
        else if constexpr(I == 6uz) return ::ruzhouxie::fwd<const tuple&&, T6>(element6);
        else if constexpr(I == 7uz) return ::ruzhouxie::fwd<const tuple&&, T7>(element7);
        else if constexpr(I == 8uz) return ::ruzhouxie::fwd<const tuple&&, T8>(element8);
        else if constexpr(I == 9uz) return ::ruzhouxie::fwd<const tuple&&, T9>(element9);
    }

    friend constexpr bool operator==(const tuple&, const tuple&) = default;
};

template<typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10>
struct tuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>
{
    RUZHOUXIE_MAYBE_EMPTY T0 element0;
    RUZHOUXIE_MAYBE_EMPTY T1 element1;
    RUZHOUXIE_MAYBE_EMPTY T2 element2;
    RUZHOUXIE_MAYBE_EMPTY T3 element3;
    RUZHOUXIE_MAYBE_EMPTY T4 element4;
    RUZHOUXIE_MAYBE_EMPTY T5 element5;
    RUZHOUXIE_MAYBE_EMPTY T6 element6;
    RUZHOUXIE_MAYBE_EMPTY T7 element7;
    RUZHOUXIE_MAYBE_EMPTY T8 element8;
    RUZHOUXIE_MAYBE_EMPTY T9 element9;
    RUZHOUXIE_MAYBE_EMPTY T10 element10;

    template<size_t I> requires (I < 11uz)
    RUZHOUXIE_INLINE constexpr auto&& get()& noexcept
    {
        if constexpr(I == 0uz) return element0;
        else if constexpr(I == 1uz) return element1;
        else if constexpr(I == 2uz) return element2;
        else if constexpr(I == 3uz) return element3;
        else if constexpr(I == 4uz) return element4;
        else if constexpr(I == 5uz) return element5;
        else if constexpr(I == 6uz) return element6;
        else if constexpr(I == 7uz) return element7;
        else if constexpr(I == 8uz) return element8;
        else if constexpr(I == 9uz) return element9;
        else if constexpr(I == 10uz) return element10;
    }

    template<size_t I> requires (I < 11uz)
    RUZHOUXIE_INLINE constexpr auto&& get()const& noexcept
    {
        if constexpr(I == 0uz) return element0;
        else if constexpr(I == 1uz) return element1;
        else if constexpr(I == 2uz) return element2;
        else if constexpr(I == 3uz) return element3;
        else if constexpr(I == 4uz) return element4;
        else if constexpr(I == 5uz) return element5;
        else if constexpr(I == 6uz) return element6;
        else if constexpr(I == 7uz) return element7;
        else if constexpr(I == 8uz) return element8;
        else if constexpr(I == 9uz) return element9;
        else if constexpr(I == 10uz) return element10;
    }

    template<size_t I> requires (I < 11uz)
    RUZHOUXIE_INLINE constexpr auto&& get()&& noexcept
    {
        if constexpr(I == 0uz) return ::ruzhouxie::fwd<tuple&&, T0>(element0);
        else if constexpr(I == 1uz) return ::ruzhouxie::fwd<tuple&&, T1>(element1);
        else if constexpr(I == 2uz) return ::ruzhouxie::fwd<tuple&&, T2>(element2);
        else if constexpr(I == 3uz) return ::ruzhouxie::fwd<tuple&&, T3>(element3);
        else if constexpr(I == 4uz) return ::ruzhouxie::fwd<tuple&&, T4>(element4);
        else if constexpr(I == 5uz) return ::ruzhouxie::fwd<tuple&&, T5>(element5);
        else if constexpr(I == 6uz) return ::ruzhouxie::fwd<tuple&&, T6>(element6);
        else if constexpr(I == 7uz) return ::ruzhouxie::fwd<tuple&&, T7>(element7);
        else if constexpr(I == 8uz) return ::ruzhouxie::fwd<tuple&&, T8>(element8);
        else if constexpr(I == 9uz) return ::ruzhouxie::fwd<tuple&&, T9>(element9);
        else if constexpr(I == 10uz) return ::ruzhouxie::fwd<tuple&&, T10>(element10);
    }

    template<size_t I> requires (I < 11uz)
    RUZHOUXIE_INLINE constexpr auto&& get()const&& noexcept
    {
        if constexpr(I == 0uz) return ::ruzhouxie::fwd<const tuple&&, T0>(element0);
        else if constexpr(I == 1uz) return ::ruzhouxie::fwd<const tuple&&, T1>(element1);
        else if constexpr(I == 2uz) return ::ruzhouxie::fwd<const tuple&&, T2>(element2);
        else if constexpr(I == 3uz) return ::ruzhouxie::fwd<const tuple&&, T3>(element3);
        else if constexpr(I == 4uz) return ::ruzhouxie::fwd<const tuple&&, T4>(element4);
        else if constexpr(I == 5uz) return ::ruzhouxie::fwd<const tuple&&, T5>(element5);
        else if constexpr(I == 6uz) return ::ruzhouxie::fwd<const tuple&&, T6>(element6);
        else if constexpr(I == 7uz) return ::ruzhouxie::fwd<const tuple&&, T7>(element7);
        else if constexpr(I == 8uz) return ::ruzhouxie::fwd<const tuple&&, T8>(element8);
        else if constexpr(I == 9uz) return ::ruzhouxie::fwd<const tuple&&, T9>(element9);
        else if constexpr(I == 10uz) return ::ruzhouxie::fwd<const tuple&&, T10>(element10);
    }

    friend constexpr bool operator==(const tuple&, const tuple&) = default;
};

template<typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11>
struct tuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>
{
    RUZHOUXIE_MAYBE_EMPTY T0 element0;
    RUZHOUXIE_MAYBE_EMPTY T1 element1;
    RUZHOUXIE_MAYBE_EMPTY T2 element2;
    RUZHOUXIE_MAYBE_EMPTY T3 element3;
    RUZHOUXIE_MAYBE_EMPTY T4 element4;
    RUZHOUXIE_MAYBE_EMPTY T5 element5;
    RUZHOUXIE_MAYBE_EMPTY T6 element6;
    RUZHOUXIE_MAYBE_EMPTY T7 element7;
    RUZHOUXIE_MAYBE_EMPTY T8 element8;
    RUZHOUXIE_MAYBE_EMPTY T9 element9;
    RUZHOUXIE_MAYBE_EMPTY T10 element10;
    RUZHOUXIE_MAYBE_EMPTY T11 element11;

    template<size_t I> requires (I < 12uz)
    RUZHOUXIE_INLINE constexpr auto&& get()& noexcept
    {
        if constexpr(I == 0uz) return element0;
        else if constexpr(I == 1uz) return element1;
        else if constexpr(I == 2uz) return element2;
        else if constexpr(I == 3uz) return element3;
        else if constexpr(I == 4uz) return element4;
        else if constexpr(I == 5uz) return element5;
        else if constexpr(I == 6uz) return element6;
        else if constexpr(I == 7uz) return element7;
        else if constexpr(I == 8uz) return element8;
        else if constexpr(I == 9uz) return element9;
        else if constexpr(I == 10uz) return element10;
        else if constexpr(I == 11uz) return element11;
    }

    template<size_t I> requires (I < 12uz)
    RUZHOUXIE_INLINE constexpr auto&& get()const& noexcept
    {
        if constexpr(I == 0uz) return element0;
        else if constexpr(I == 1uz) return element1;
        else if constexpr(I == 2uz) return element2;
        else if constexpr(I == 3uz) return element3;
        else if constexpr(I == 4uz) return element4;
        else if constexpr(I == 5uz) return element5;
        else if constexpr(I == 6uz) return element6;
        else if constexpr(I == 7uz) return element7;
        else if constexpr(I == 8uz) return element8;
        else if constexpr(I == 9uz) return element9;
        else if constexpr(I == 10uz) return element10;
        else if constexpr(I == 11uz) return element11;
    }

    template<size_t I> requires (I < 12uz)
    RUZHOUXIE_INLINE constexpr auto&& get()&& noexcept
    {
        if constexpr(I == 0uz) return ::ruzhouxie::fwd<tuple&&, T0>(element0);
        else if constexpr(I == 1uz) return ::ruzhouxie::fwd<tuple&&, T1>(element1);
        else if constexpr(I == 2uz) return ::ruzhouxie::fwd<tuple&&, T2>(element2);
        else if constexpr(I == 3uz) return ::ruzhouxie::fwd<tuple&&, T3>(element3);
        else if constexpr(I == 4uz) return ::ruzhouxie::fwd<tuple&&, T4>(element4);
        else if constexpr(I == 5uz) return ::ruzhouxie::fwd<tuple&&, T5>(element5);
        else if constexpr(I == 6uz) return ::ruzhouxie::fwd<tuple&&, T6>(element6);
        else if constexpr(I == 7uz) return ::ruzhouxie::fwd<tuple&&, T7>(element7);
        else if constexpr(I == 8uz) return ::ruzhouxie::fwd<tuple&&, T8>(element8);
        else if constexpr(I == 9uz) return ::ruzhouxie::fwd<tuple&&, T9>(element9);
        else if constexpr(I == 10uz) return ::ruzhouxie::fwd<tuple&&, T10>(element10);
        else if constexpr(I == 11uz) return ::ruzhouxie::fwd<tuple&&, T11>(element11);
    }

    template<size_t I> requires (I < 12uz)
    RUZHOUXIE_INLINE constexpr auto&& get()const&& noexcept
    {
        if constexpr(I == 0uz) return ::ruzhouxie::fwd<const tuple&&, T0>(element0);
        else if constexpr(I == 1uz) return ::ruzhouxie::fwd<const tuple&&, T1>(element1);
        else if constexpr(I == 2uz) return ::ruzhouxie::fwd<const tuple&&, T2>(element2);
        else if constexpr(I == 3uz) return ::ruzhouxie::fwd<const tuple&&, T3>(element3);
        else if constexpr(I == 4uz) return ::ruzhouxie::fwd<const tuple&&, T4>(element4);
        else if constexpr(I == 5uz) return ::ruzhouxie::fwd<const tuple&&, T5>(element5);
        else if constexpr(I == 6uz) return ::ruzhouxie::fwd<const tuple&&, T6>(element6);
        else if constexpr(I == 7uz) return ::ruzhouxie::fwd<const tuple&&, T7>(element7);
        else if constexpr(I == 8uz) return ::ruzhouxie::fwd<const tuple&&, T8>(element8);
        else if constexpr(I == 9uz) return ::ruzhouxie::fwd<const tuple&&, T9>(element9);
        else if constexpr(I == 10uz) return ::ruzhouxie::fwd<const tuple&&, T10>(element10);
        else if constexpr(I == 11uz) return ::ruzhouxie::fwd<const tuple&&, T11>(element11);
    }

    friend constexpr bool operator==(const tuple&, const tuple&) = default;
};

template<typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12>
struct tuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>
{
    RUZHOUXIE_MAYBE_EMPTY T0 element0;
    RUZHOUXIE_MAYBE_EMPTY T1 element1;
    RUZHOUXIE_MAYBE_EMPTY T2 element2;
    RUZHOUXIE_MAYBE_EMPTY T3 element3;
    RUZHOUXIE_MAYBE_EMPTY T4 element4;
    RUZHOUXIE_MAYBE_EMPTY T5 element5;
    RUZHOUXIE_MAYBE_EMPTY T6 element6;
    RUZHOUXIE_MAYBE_EMPTY T7 element7;
    RUZHOUXIE_MAYBE_EMPTY T8 element8;
    RUZHOUXIE_MAYBE_EMPTY T9 element9;
    RUZHOUXIE_MAYBE_EMPTY T10 element10;
    RUZHOUXIE_MAYBE_EMPTY T11 element11;
    RUZHOUXIE_MAYBE_EMPTY T12 element12;

    template<size_t I> requires (I < 13uz)
    RUZHOUXIE_INLINE constexpr auto&& get()& noexcept
    {
        if constexpr(I == 0uz) return element0;
        else if constexpr(I == 1uz) return element1;
        else if constexpr(I == 2uz) return element2;
        else if constexpr(I == 3uz) return element3;
        else if constexpr(I == 4uz) return element4;
        else if constexpr(I == 5uz) return element5;
        else if constexpr(I == 6uz) return element6;
        else if constexpr(I == 7uz) return element7;
        else if constexpr(I == 8uz) return element8;
        else if constexpr(I == 9uz) return element9;
        else if constexpr(I == 10uz) return element10;
        else if constexpr(I == 11uz) return element11;
        else if constexpr(I == 12uz) return element12;
    }

    template<size_t I> requires (I < 13uz)
    RUZHOUXIE_INLINE constexpr auto&& get()const& noexcept
    {
        if constexpr(I == 0uz) return element0;
        else if constexpr(I == 1uz) return element1;
        else if constexpr(I == 2uz) return element2;
        else if constexpr(I == 3uz) return element3;
        else if constexpr(I == 4uz) return element4;
        else if constexpr(I == 5uz) return element5;
        else if constexpr(I == 6uz) return element6;
        else if constexpr(I == 7uz) return element7;
        else if constexpr(I == 8uz) return element8;
        else if constexpr(I == 9uz) return element9;
        else if constexpr(I == 10uz) return element10;
        else if constexpr(I == 11uz) return element11;
        else if constexpr(I == 12uz) return element12;
    }

    template<size_t I> requires (I < 13uz)
    RUZHOUXIE_INLINE constexpr auto&& get()&& noexcept
    {
        if constexpr(I == 0uz) return ::ruzhouxie::fwd<tuple&&, T0>(element0);
        else if constexpr(I == 1uz) return ::ruzhouxie::fwd<tuple&&, T1>(element1);
        else if constexpr(I == 2uz) return ::ruzhouxie::fwd<tuple&&, T2>(element2);
        else if constexpr(I == 3uz) return ::ruzhouxie::fwd<tuple&&, T3>(element3);
        else if constexpr(I == 4uz) return ::ruzhouxie::fwd<tuple&&, T4>(element4);
        else if constexpr(I == 5uz) return ::ruzhouxie::fwd<tuple&&, T5>(element5);
        else if constexpr(I == 6uz) return ::ruzhouxie::fwd<tuple&&, T6>(element6);
        else if constexpr(I == 7uz) return ::ruzhouxie::fwd<tuple&&, T7>(element7);
        else if constexpr(I == 8uz) return ::ruzhouxie::fwd<tuple&&, T8>(element8);
        else if constexpr(I == 9uz) return ::ruzhouxie::fwd<tuple&&, T9>(element9);
        else if constexpr(I == 10uz) return ::ruzhouxie::fwd<tuple&&, T10>(element10);
        else if constexpr(I == 11uz) return ::ruzhouxie::fwd<tuple&&, T11>(element11);
        else if constexpr(I == 12uz) return ::ruzhouxie::fwd<tuple&&, T12>(element12);
    }

    template<size_t I> requires (I < 13uz)
    RUZHOUXIE_INLINE constexpr auto&& get()const&& noexcept
    {
        if constexpr(I == 0uz) return ::ruzhouxie::fwd<const tuple&&, T0>(element0);
        else if constexpr(I == 1uz) return ::ruzhouxie::fwd<const tuple&&, T1>(element1);
        else if constexpr(I == 2uz) return ::ruzhouxie::fwd<const tuple&&, T2>(element2);
        else if constexpr(I == 3uz) return ::ruzhouxie::fwd<const tuple&&, T3>(element3);
        else if constexpr(I == 4uz) return ::ruzhouxie::fwd<const tuple&&, T4>(element4);
        else if constexpr(I == 5uz) return ::ruzhouxie::fwd<const tuple&&, T5>(element5);
        else if constexpr(I == 6uz) return ::ruzhouxie::fwd<const tuple&&, T6>(element6);
        else if constexpr(I == 7uz) return ::ruzhouxie::fwd<const tuple&&, T7>(element7);
        else if constexpr(I == 8uz) return ::ruzhouxie::fwd<const tuple&&, T8>(element8);
        else if constexpr(I == 9uz) return ::ruzhouxie::fwd<const tuple&&, T9>(element9);
        else if constexpr(I == 10uz) return ::ruzhouxie::fwd<const tuple&&, T10>(element10);
        else if constexpr(I == 11uz) return ::ruzhouxie::fwd<const tuple&&, T11>(element11);
        else if constexpr(I == 12uz) return ::ruzhouxie::fwd<const tuple&&, T12>(element12);
    }

    friend constexpr bool operator==(const tuple&, const tuple&) = default;
};

template<typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13>
struct tuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>
{
    RUZHOUXIE_MAYBE_EMPTY T0 element0;
    RUZHOUXIE_MAYBE_EMPTY T1 element1;
    RUZHOUXIE_MAYBE_EMPTY T2 element2;
    RUZHOUXIE_MAYBE_EMPTY T3 element3;
    RUZHOUXIE_MAYBE_EMPTY T4 element4;
    RUZHOUXIE_MAYBE_EMPTY T5 element5;
    RUZHOUXIE_MAYBE_EMPTY T6 element6;
    RUZHOUXIE_MAYBE_EMPTY T7 element7;
    RUZHOUXIE_MAYBE_EMPTY T8 element8;
    RUZHOUXIE_MAYBE_EMPTY T9 element9;
    RUZHOUXIE_MAYBE_EMPTY T10 element10;
    RUZHOUXIE_MAYBE_EMPTY T11 element11;
    RUZHOUXIE_MAYBE_EMPTY T12 element12;
    RUZHOUXIE_MAYBE_EMPTY T13 element13;

    template<size_t I> requires (I < 14uz)
    RUZHOUXIE_INLINE constexpr auto&& get()& noexcept
    {
        if constexpr(I == 0uz) return element0;
        else if constexpr(I == 1uz) return element1;
        else if constexpr(I == 2uz) return element2;
        else if constexpr(I == 3uz) return element3;
        else if constexpr(I == 4uz) return element4;
        else if constexpr(I == 5uz) return element5;
        else if constexpr(I == 6uz) return element6;
        else if constexpr(I == 7uz) return element7;
        else if constexpr(I == 8uz) return element8;
        else if constexpr(I == 9uz) return element9;
        else if constexpr(I == 10uz) return element10;
        else if constexpr(I == 11uz) return element11;
        else if constexpr(I == 12uz) return element12;
        else if constexpr(I == 13uz) return element13;
    }

    template<size_t I> requires (I < 14uz)
    RUZHOUXIE_INLINE constexpr auto&& get()const& noexcept
    {
        if constexpr(I == 0uz) return element0;
        else if constexpr(I == 1uz) return element1;
        else if constexpr(I == 2uz) return element2;
        else if constexpr(I == 3uz) return element3;
        else if constexpr(I == 4uz) return element4;
        else if constexpr(I == 5uz) return element5;
        else if constexpr(I == 6uz) return element6;
        else if constexpr(I == 7uz) return element7;
        else if constexpr(I == 8uz) return element8;
        else if constexpr(I == 9uz) return element9;
        else if constexpr(I == 10uz) return element10;
        else if constexpr(I == 11uz) return element11;
        else if constexpr(I == 12uz) return element12;
        else if constexpr(I == 13uz) return element13;
    }

    template<size_t I> requires (I < 14uz)
    RUZHOUXIE_INLINE constexpr auto&& get()&& noexcept
    {
        if constexpr(I == 0uz) return ::ruzhouxie::fwd<tuple&&, T0>(element0);
        else if constexpr(I == 1uz) return ::ruzhouxie::fwd<tuple&&, T1>(element1);
        else if constexpr(I == 2uz) return ::ruzhouxie::fwd<tuple&&, T2>(element2);
        else if constexpr(I == 3uz) return ::ruzhouxie::fwd<tuple&&, T3>(element3);
        else if constexpr(I == 4uz) return ::ruzhouxie::fwd<tuple&&, T4>(element4);
        else if constexpr(I == 5uz) return ::ruzhouxie::fwd<tuple&&, T5>(element5);
        else if constexpr(I == 6uz) return ::ruzhouxie::fwd<tuple&&, T6>(element6);
        else if constexpr(I == 7uz) return ::ruzhouxie::fwd<tuple&&, T7>(element7);
        else if constexpr(I == 8uz) return ::ruzhouxie::fwd<tuple&&, T8>(element8);
        else if constexpr(I == 9uz) return ::ruzhouxie::fwd<tuple&&, T9>(element9);
        else if constexpr(I == 10uz) return ::ruzhouxie::fwd<tuple&&, T10>(element10);
        else if constexpr(I == 11uz) return ::ruzhouxie::fwd<tuple&&, T11>(element11);
        else if constexpr(I == 12uz) return ::ruzhouxie::fwd<tuple&&, T12>(element12);
        else if constexpr(I == 13uz) return ::ruzhouxie::fwd<tuple&&, T13>(element13);
    }

    template<size_t I> requires (I < 14uz)
    RUZHOUXIE_INLINE constexpr auto&& get()const&& noexcept
    {
        if constexpr(I == 0uz) return ::ruzhouxie::fwd<const tuple&&, T0>(element0);
        else if constexpr(I == 1uz) return ::ruzhouxie::fwd<const tuple&&, T1>(element1);
        else if constexpr(I == 2uz) return ::ruzhouxie::fwd<const tuple&&, T2>(element2);
        else if constexpr(I == 3uz) return ::ruzhouxie::fwd<const tuple&&, T3>(element3);
        else if constexpr(I == 4uz) return ::ruzhouxie::fwd<const tuple&&, T4>(element4);
        else if constexpr(I == 5uz) return ::ruzhouxie::fwd<const tuple&&, T5>(element5);
        else if constexpr(I == 6uz) return ::ruzhouxie::fwd<const tuple&&, T6>(element6);
        else if constexpr(I == 7uz) return ::ruzhouxie::fwd<const tuple&&, T7>(element7);
        else if constexpr(I == 8uz) return ::ruzhouxie::fwd<const tuple&&, T8>(element8);
        else if constexpr(I == 9uz) return ::ruzhouxie::fwd<const tuple&&, T9>(element9);
        else if constexpr(I == 10uz) return ::ruzhouxie::fwd<const tuple&&, T10>(element10);
        else if constexpr(I == 11uz) return ::ruzhouxie::fwd<const tuple&&, T11>(element11);
        else if constexpr(I == 12uz) return ::ruzhouxie::fwd<const tuple&&, T12>(element12);
        else if constexpr(I == 13uz) return ::ruzhouxie::fwd<const tuple&&, T13>(element13);
    }

    friend constexpr bool operator==(const tuple&, const tuple&) = default;
};

template<typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14>
struct tuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>
{
    RUZHOUXIE_MAYBE_EMPTY T0 element0;
    RUZHOUXIE_MAYBE_EMPTY T1 element1;
    RUZHOUXIE_MAYBE_EMPTY T2 element2;
    RUZHOUXIE_MAYBE_EMPTY T3 element3;
    RUZHOUXIE_MAYBE_EMPTY T4 element4;
    RUZHOUXIE_MAYBE_EMPTY T5 element5;
    RUZHOUXIE_MAYBE_EMPTY T6 element6;
    RUZHOUXIE_MAYBE_EMPTY T7 element7;
    RUZHOUXIE_MAYBE_EMPTY T8 element8;
    RUZHOUXIE_MAYBE_EMPTY T9 element9;
    RUZHOUXIE_MAYBE_EMPTY T10 element10;
    RUZHOUXIE_MAYBE_EMPTY T11 element11;
    RUZHOUXIE_MAYBE_EMPTY T12 element12;
    RUZHOUXIE_MAYBE_EMPTY T13 element13;
    RUZHOUXIE_MAYBE_EMPTY T14 element14;

    template<size_t I> requires (I < 15uz)
    RUZHOUXIE_INLINE constexpr auto&& get()& noexcept
    {
        if constexpr(I == 0uz) return element0;
        else if constexpr(I == 1uz) return element1;
        else if constexpr(I == 2uz) return element2;
        else if constexpr(I == 3uz) return element3;
        else if constexpr(I == 4uz) return element4;
        else if constexpr(I == 5uz) return element5;
        else if constexpr(I == 6uz) return element6;
        else if constexpr(I == 7uz) return element7;
        else if constexpr(I == 8uz) return element8;
        else if constexpr(I == 9uz) return element9;
        else if constexpr(I == 10uz) return element10;
        else if constexpr(I == 11uz) return element11;
        else if constexpr(I == 12uz) return element12;
        else if constexpr(I == 13uz) return element13;
        else if constexpr(I == 14uz) return element14;
    }

    template<size_t I> requires (I < 15uz)
    RUZHOUXIE_INLINE constexpr auto&& get()const& noexcept
    {
        if constexpr(I == 0uz) return element0;
        else if constexpr(I == 1uz) return element1;
        else if constexpr(I == 2uz) return element2;
        else if constexpr(I == 3uz) return element3;
        else if constexpr(I == 4uz) return element4;
        else if constexpr(I == 5uz) return element5;
        else if constexpr(I == 6uz) return element6;
        else if constexpr(I == 7uz) return element7;
        else if constexpr(I == 8uz) return element8;
        else if constexpr(I == 9uz) return element9;
        else if constexpr(I == 10uz) return element10;
        else if constexpr(I == 11uz) return element11;
        else if constexpr(I == 12uz) return element12;
        else if constexpr(I == 13uz) return element13;
        else if constexpr(I == 14uz) return element14;
    }

    template<size_t I> requires (I < 15uz)
    RUZHOUXIE_INLINE constexpr auto&& get()&& noexcept
    {
        if constexpr(I == 0uz) return ::ruzhouxie::fwd<tuple&&, T0>(element0);
        else if constexpr(I == 1uz) return ::ruzhouxie::fwd<tuple&&, T1>(element1);
        else if constexpr(I == 2uz) return ::ruzhouxie::fwd<tuple&&, T2>(element2);
        else if constexpr(I == 3uz) return ::ruzhouxie::fwd<tuple&&, T3>(element3);
        else if constexpr(I == 4uz) return ::ruzhouxie::fwd<tuple&&, T4>(element4);
        else if constexpr(I == 5uz) return ::ruzhouxie::fwd<tuple&&, T5>(element5);
        else if constexpr(I == 6uz) return ::ruzhouxie::fwd<tuple&&, T6>(element6);
        else if constexpr(I == 7uz) return ::ruzhouxie::fwd<tuple&&, T7>(element7);
        else if constexpr(I == 8uz) return ::ruzhouxie::fwd<tuple&&, T8>(element8);
        else if constexpr(I == 9uz) return ::ruzhouxie::fwd<tuple&&, T9>(element9);
        else if constexpr(I == 10uz) return ::ruzhouxie::fwd<tuple&&, T10>(element10);
        else if constexpr(I == 11uz) return ::ruzhouxie::fwd<tuple&&, T11>(element11);
        else if constexpr(I == 12uz) return ::ruzhouxie::fwd<tuple&&, T12>(element12);
        else if constexpr(I == 13uz) return ::ruzhouxie::fwd<tuple&&, T13>(element13);
        else if constexpr(I == 14uz) return ::ruzhouxie::fwd<tuple&&, T14>(element14);
    }

    template<size_t I> requires (I < 15uz)
    RUZHOUXIE_INLINE constexpr auto&& get()const&& noexcept
    {
        if constexpr(I == 0uz) return ::ruzhouxie::fwd<const tuple&&, T0>(element0);
        else if constexpr(I == 1uz) return ::ruzhouxie::fwd<const tuple&&, T1>(element1);
        else if constexpr(I == 2uz) return ::ruzhouxie::fwd<const tuple&&, T2>(element2);
        else if constexpr(I == 3uz) return ::ruzhouxie::fwd<const tuple&&, T3>(element3);
        else if constexpr(I == 4uz) return ::ruzhouxie::fwd<const tuple&&, T4>(element4);
        else if constexpr(I == 5uz) return ::ruzhouxie::fwd<const tuple&&, T5>(element5);
        else if constexpr(I == 6uz) return ::ruzhouxie::fwd<const tuple&&, T6>(element6);
        else if constexpr(I == 7uz) return ::ruzhouxie::fwd<const tuple&&, T7>(element7);
        else if constexpr(I == 8uz) return ::ruzhouxie::fwd<const tuple&&, T8>(element8);
        else if constexpr(I == 9uz) return ::ruzhouxie::fwd<const tuple&&, T9>(element9);
        else if constexpr(I == 10uz) return ::ruzhouxie::fwd<const tuple&&, T10>(element10);
        else if constexpr(I == 11uz) return ::ruzhouxie::fwd<const tuple&&, T11>(element11);
        else if constexpr(I == 12uz) return ::ruzhouxie::fwd<const tuple&&, T12>(element12);
        else if constexpr(I == 13uz) return ::ruzhouxie::fwd<const tuple&&, T13>(element13);
        else if constexpr(I == 14uz) return ::ruzhouxie::fwd<const tuple&&, T14>(element14);
    }

    friend constexpr bool operator==(const tuple&, const tuple&) = default;
};

template<typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15>
struct tuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>
{
    RUZHOUXIE_MAYBE_EMPTY T0 element0;
    RUZHOUXIE_MAYBE_EMPTY T1 element1;
    RUZHOUXIE_MAYBE_EMPTY T2 element2;
    RUZHOUXIE_MAYBE_EMPTY T3 element3;
    RUZHOUXIE_MAYBE_EMPTY T4 element4;
    RUZHOUXIE_MAYBE_EMPTY T5 element5;
    RUZHOUXIE_MAYBE_EMPTY T6 element6;
    RUZHOUXIE_MAYBE_EMPTY T7 element7;
    RUZHOUXIE_MAYBE_EMPTY T8 element8;
    RUZHOUXIE_MAYBE_EMPTY T9 element9;
    RUZHOUXIE_MAYBE_EMPTY T10 element10;
    RUZHOUXIE_MAYBE_EMPTY T11 element11;
    RUZHOUXIE_MAYBE_EMPTY T12 element12;
    RUZHOUXIE_MAYBE_EMPTY T13 element13;
    RUZHOUXIE_MAYBE_EMPTY T14 element14;
    RUZHOUXIE_MAYBE_EMPTY T15 element15;

    template<size_t I> requires (I < 16uz)
    RUZHOUXIE_INLINE constexpr auto&& get()& noexcept
    {
        if constexpr(I == 0uz) return element0;
        else if constexpr(I == 1uz) return element1;
        else if constexpr(I == 2uz) return element2;
        else if constexpr(I == 3uz) return element3;
        else if constexpr(I == 4uz) return element4;
        else if constexpr(I == 5uz) return element5;
        else if constexpr(I == 6uz) return element6;
        else if constexpr(I == 7uz) return element7;
        else if constexpr(I == 8uz) return element8;
        else if constexpr(I == 9uz) return element9;
        else if constexpr(I == 10uz) return element10;
        else if constexpr(I == 11uz) return element11;
        else if constexpr(I == 12uz) return element12;
        else if constexpr(I == 13uz) return element13;
        else if constexpr(I == 14uz) return element14;
        else if constexpr(I == 15uz) return element15;
    }

    template<size_t I> requires (I < 16uz)
    RUZHOUXIE_INLINE constexpr auto&& get()const& noexcept
    {
        if constexpr(I == 0uz) return element0;
        else if constexpr(I == 1uz) return element1;
        else if constexpr(I == 2uz) return element2;
        else if constexpr(I == 3uz) return element3;
        else if constexpr(I == 4uz) return element4;
        else if constexpr(I == 5uz) return element5;
        else if constexpr(I == 6uz) return element6;
        else if constexpr(I == 7uz) return element7;
        else if constexpr(I == 8uz) return element8;
        else if constexpr(I == 9uz) return element9;
        else if constexpr(I == 10uz) return element10;
        else if constexpr(I == 11uz) return element11;
        else if constexpr(I == 12uz) return element12;
        else if constexpr(I == 13uz) return element13;
        else if constexpr(I == 14uz) return element14;
        else if constexpr(I == 15uz) return element15;
    }

    template<size_t I> requires (I < 16uz)
    RUZHOUXIE_INLINE constexpr auto&& get()&& noexcept
    {
        if constexpr(I == 0uz) return ::ruzhouxie::fwd<tuple&&, T0>(element0);
        else if constexpr(I == 1uz) return ::ruzhouxie::fwd<tuple&&, T1>(element1);
        else if constexpr(I == 2uz) return ::ruzhouxie::fwd<tuple&&, T2>(element2);
        else if constexpr(I == 3uz) return ::ruzhouxie::fwd<tuple&&, T3>(element3);
        else if constexpr(I == 4uz) return ::ruzhouxie::fwd<tuple&&, T4>(element4);
        else if constexpr(I == 5uz) return ::ruzhouxie::fwd<tuple&&, T5>(element5);
        else if constexpr(I == 6uz) return ::ruzhouxie::fwd<tuple&&, T6>(element6);
        else if constexpr(I == 7uz) return ::ruzhouxie::fwd<tuple&&, T7>(element7);
        else if constexpr(I == 8uz) return ::ruzhouxie::fwd<tuple&&, T8>(element8);
        else if constexpr(I == 9uz) return ::ruzhouxie::fwd<tuple&&, T9>(element9);
        else if constexpr(I == 10uz) return ::ruzhouxie::fwd<tuple&&, T10>(element10);
        else if constexpr(I == 11uz) return ::ruzhouxie::fwd<tuple&&, T11>(element11);
        else if constexpr(I == 12uz) return ::ruzhouxie::fwd<tuple&&, T12>(element12);
        else if constexpr(I == 13uz) return ::ruzhouxie::fwd<tuple&&, T13>(element13);
        else if constexpr(I == 14uz) return ::ruzhouxie::fwd<tuple&&, T14>(element14);
        else if constexpr(I == 15uz) return ::ruzhouxie::fwd<tuple&&, T15>(element15);
    }

    template<size_t I> requires (I < 16uz)
    RUZHOUXIE_INLINE constexpr auto&& get()const&& noexcept
    {
        if constexpr(I == 0uz) return ::ruzhouxie::fwd<const tuple&&, T0>(element0);
        else if constexpr(I == 1uz) return ::ruzhouxie::fwd<const tuple&&, T1>(element1);
        else if constexpr(I == 2uz) return ::ruzhouxie::fwd<const tuple&&, T2>(element2);
        else if constexpr(I == 3uz) return ::ruzhouxie::fwd<const tuple&&, T3>(element3);
        else if constexpr(I == 4uz) return ::ruzhouxie::fwd<const tuple&&, T4>(element4);
        else if constexpr(I == 5uz) return ::ruzhouxie::fwd<const tuple&&, T5>(element5);
        else if constexpr(I == 6uz) return ::ruzhouxie::fwd<const tuple&&, T6>(element6);
        else if constexpr(I == 7uz) return ::ruzhouxie::fwd<const tuple&&, T7>(element7);
        else if constexpr(I == 8uz) return ::ruzhouxie::fwd<const tuple&&, T8>(element8);
        else if constexpr(I == 9uz) return ::ruzhouxie::fwd<const tuple&&, T9>(element9);
        else if constexpr(I == 10uz) return ::ruzhouxie::fwd<const tuple&&, T10>(element10);
        else if constexpr(I == 11uz) return ::ruzhouxie::fwd<const tuple&&, T11>(element11);
        else if constexpr(I == 12uz) return ::ruzhouxie::fwd<const tuple&&, T12>(element12);
        else if constexpr(I == 13uz) return ::ruzhouxie::fwd<const tuple&&, T13>(element13);
        else if constexpr(I == 14uz) return ::ruzhouxie::fwd<const tuple&&, T14>(element14);
        else if constexpr(I == 15uz) return ::ruzhouxie::fwd<const tuple&&, T15>(element15);
    }

    friend constexpr bool operator==(const tuple&, const tuple&) = default;
};

